using CherryCitySoftware.MedicalOffice.Context;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using CherryCitySoftware.MedicalOffice.Models;
using Microsoft.AspNet.Identity.EntityFramework;
using System.Threading.Tasks;
using System.Text;

namespace CherryCitySoftware.MedicalOffice.extensions
{
    public static class Extensions
    {
        public static IEnumerable<SelectListItem> GetRecepients(this System.Security.Principal.IPrincipal sender)
        {
            var allRoles = new ApplicationDbContext().ApplicationRoles.ToList();
            var drRole = allRoles.Where(r => r.Name.Equals("Doctor", StringComparison.InvariantCultureIgnoreCase)).Single();
            var patientRole = allRoles.Where(r => r.Name.Equals("Patient", StringComparison.InvariantCultureIgnoreCase)).Single();

            var recepientRole = sender.IsInRole("Doctor") ? patientRole : drRole;

            var recepients = new ApplicationDbContext().Users.Where(
                u => u.Roles.Where(r=>r.RoleId.Equals(recepientRole.Id, StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault()!=null);
            return recepients.Where(u => !u.UserName.Equals(sender.Identity.Name, StringComparison.InvariantCultureIgnoreCase))
                .Select(u => new SelectListItem()
                {
                    Value = u.Id,
                    Text = u.LastName + ", " + u.FirstName
                }).OrderBy(m => m.Text);

        }
        public static IEnumerable<ApplicationUser> GetPatients(this System.Security.Principal.IPrincipal sender)
        {
            var allRoles = new ApplicationDbContext().ApplicationRoles.ToList();
            var drRole = allRoles.Where(r => r.Name.Equals("Doctor", StringComparison.InvariantCultureIgnoreCase)).Single();
            var patientRole = allRoles.Where(r => r.Name.Equals("Patient", StringComparison.InvariantCultureIgnoreCase)).Single();

            var recepientRole = sender.IsInRole("Doctor") ? patientRole : drRole;

            return new ApplicationDbContext().Users.Where(
                u => u.Roles.Where(r => r.RoleId.Equals(recepientRole.Id, StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault() != null)
                .OrderBy(u=>u.FirstName).ThenBy(u=>u.LastName).ToList();
            
        }

        public static void LogException(this Exception e)
        {
            try
            {
                var db = new ApplicationDbContext();
                db.LoggingMessages.Add(new LoggingMessage()
                    {
                        Category = "Error",
                        EntryDate = DateTime.Now,
                        UserName = HttpContext.Current.User.Identity.Name,
                        Message = e.ToString()
                    });
            }
            catch { }
        }

        public static string GetRoleName(this string roleId)
        {
            ApplicationDbContext db = new ApplicationDbContext();
            return db.ApplicationRoles.Where(r => r.Id.Equals(roleId, StringComparison.InvariantCultureIgnoreCase)).Single().Name;
        }

        public static string GetRoles (this ApplicationUser user)
        {
            var db = new ApplicationDbContext();

            var roleIds = db.Users.Where(u => u.Id.Equals(user.Id, StringComparison.InvariantCultureIgnoreCase)).Single().Roles.Select(r => r.RoleId).ToList();

            return string.Join("; ", db.ApplicationRoles.Where(r => roleIds.Contains(r.Id)).Select(r => r.Name));
        }

        public static string GetAuthenticatedUserName(this System.Security.Principal.IPrincipal user)
        {
            if (!user.Identity.IsAuthenticated) return null;
            var db = new ApplicationDbContext();
            var u = db.Users.Where(i => i.UserName.Equals(user.Identity.Name, StringComparison.CurrentCultureIgnoreCase)).Single();
            return string.Format("{0} {1}", u.FirstName, u.LastName);
        }
    }

    /// <summary>
    /// The intention of this class is to log SQL queries generated by LINQ
    /// </summary>
    class TraceTextWriter : System.IO.TextWriter
    {
        private Encoding encoding;

        /// <summary>
        /// Constructor
        /// Set the method name with class name of the calling object and the name of the calling method 
        /// </summary>
        /// <param name="callingObj"></param>
        public TraceTextWriter(object callingObj)
        {
            System.Diagnostics.StackFrame sf = new System.Diagnostics.StackFrame(2);
            MethodName = callingObj.GetType().Name + "." + sf.GetMethod().Name;
        }
        /// <summary>
        /// Contractor
        /// Set the method name with calling class and the name of the calling method 
        /// </summary>
        /// <param name="callingClass"></param>
        public TraceTextWriter(Type callingClass)
        {
            System.Diagnostics.StackFrame sf = new System.Diagnostics.StackFrame(2);
            MethodName = callingClass.Name + "." + sf.GetMethod().Name;
        }
        /// <summary>
        ///Get the encoding
        /// </summary>
        public override Encoding Encoding
        {
            get
            {
                if (this.encoding == null)
                {
                    this.encoding = new UnicodeEncoding(false, false);
                }
                return encoding;
            }
        }

        /// <summary>
        /// Write string with Logger.WriteInformation()
        /// </summary>
        /// <param name="value">message string</param>
        public override void Write(string value)
        {
            if (value.Trim() == string.Empty) return;
            Dictionary<string, object> d = new Dictionary<string, object>();
            d.Add("method", MethodName);
            //Logger.WriteTrace(value, d);
            System.Diagnostics.Debug.WriteLine(MethodName);
            System.Diagnostics.Debug.Write(value);
        }

        /// <summary>
        /// Convert char array into string and write to logger
        /// </summary>
        /// <param name="buffer">character array</param>
        public override void Write(char[] buffer)
        {
            this.Write(new string(buffer));
        }

        /// <summary>
        /// Convert char array into string and write to logger
        /// </summary>
        /// <param name="buffer">character array</param>
        /// <param name="index">start index</param>
        /// <param name="count">number of characters to be written</param>
        public override void Write(char[] buffer, int index, int count)
        {
            this.Write(new string(buffer, index, count));
        }

        /// <summary>
        /// Get and set calling method name
        /// </summary>
        private string MethodName
        {
            get;
            set;
        }
    }
}
