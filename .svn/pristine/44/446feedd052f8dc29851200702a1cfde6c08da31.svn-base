using System.Threading.Tasks;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.Owin;
using CherryCitySoftware.MedicalOffice.Models;
using CherryCitySoftware.MedicalOffice.Context;
using Microsoft.Owin.Security;
using System.Security.Claims;
using System;
using CherryCitySoftware.MedicalOffice.extensions;
using SendGrid;
using System.Net;
using System.Configuration;
using System.Diagnostics;

namespace CherryCitySoftware.MedicalOffice
{
    // Configure the application user manager used in this application. UserManager is defined in ASP.NET Identity and is used by the application.

    public class ApplicationUserManager : UserManager<ApplicationUser>
    {
        public ApplicationUserManager(IUserStore<ApplicationUser> store)
            : base(store)
        {
        }

        public static ApplicationUserManager Create(IdentityFactoryOptions<ApplicationUserManager> options, IOwinContext context) 
        {
            var manager = new ApplicationUserManager(new UserStore<ApplicationUser>(context.Get<ApplicationDbContext>()));
            // Configure validation logic for usernames
            manager.UserValidator = new UserValidator<ApplicationUser>(manager)
            {
                AllowOnlyAlphanumericUserNames = false,
                RequireUniqueEmail = true
            };
            // Configure validation logic for passwords
            manager.PasswordValidator = new PasswordValidator
            {
                RequiredLength = 6,
                RequireNonLetterOrDigit = true,
                RequireDigit = true,
                RequireLowercase = true,
                RequireUppercase = true,
            };
            // Configure user lockout defaults
            // Configure user lockout defaults
            manager.UserLockoutEnabledByDefault = true;
            manager.DefaultAccountLockoutTimeSpan = TimeSpan.FromMinutes(5);
            manager.MaxFailedAccessAttemptsBeforeLockout = 5;
            // Register two factor authentication providers. This application uses Phone and Emails as a step of receiving a code for verifying the user
            // You can write your own provider and plug in here.
            manager.RegisterTwoFactorProvider("PhoneCode", new PhoneNumberTokenProvider<ApplicationUser>
            {
                MessageFormat = "Your security code is: {0}"
            });
            manager.RegisterTwoFactorProvider("EmailCode", new EmailTokenProvider<ApplicationUser>
            {
                Subject = "Security Code",
                BodyFormat = "Your security code is: {0}"
            });
            manager.EmailService = new EmailService();
            manager.SmsService = new SmsService();
            var dataProtectionProvider = options.DataProtectionProvider;
            if (dataProtectionProvider != null)
            {
                manager.UserTokenProvider = new DataProtectorTokenProvider<ApplicationUser>(dataProtectionProvider.Create("ASP.NET Identity"));
            }
            return manager;
        }
    }

    public class ApplicationRoleManager : RoleManager<ApplicationRole>
    {
        public ApplicationRoleManager(IRoleStore<ApplicationRole, string> roleStore)
            : base(roleStore)
        {
        }

        public static ApplicationRoleManager Create(IdentityFactoryOptions<ApplicationRoleManager> options, IOwinContext context)
        {
            return new ApplicationRoleManager(new RoleStore<ApplicationRole>(context.Get<ApplicationDbContext>()));
        }
    }

    public class EmailService : IIdentityMessageService
    {
        //public Task SendAsync(IdentityMessage message)
        //{
        //    var senderEmailAddress = "support@cherrycitysoftware.com";
        //    var senderName = "Support Group";
        //    var senderPwd = "Vvestqb19";

        //    var emailHost = "smtp.gmail.com";
        //    var emailHostPort = 587;

        //    var ret = SendEmail(message.Destination, message.Subject, message.Body, senderEmailAddress, senderName, emailHost, emailHostPort, senderPwd);
        //    // Plug in your email service here to send an email.
        //    return Task.FromResult(ret);
        //}

        //public static bool SendEmail(string sAddress, string sSubject, string message, string senderEmailAddress, string senderName, string emailHost, int emailHostPort, string senderPwd)
        //{
        //    try
        //    {
        //        System.Net.Mail.MailMessage mail = new System.Net.Mail.MailMessage();
        //        System.Net.Mail.MailAddress addr;
        //        addr = new System.Net.Mail.MailAddress(senderEmailAddress, senderName);

        //        mail.From = addr;
        //        mail.Priority = System.Net.Mail.MailPriority.Normal;
        //        mail.Subject = sSubject;
        //        mail.Body = message;
        //        mail.To.Add(sAddress);
        //        mail.IsBodyHtml = false;
        //        System.Net.Mail.SmtpClient client =
        //            new System.Net.Mail.SmtpClient(emailHost, emailHostPort);
        //        mail.DeliveryNotificationOptions = System.Net.Mail.DeliveryNotificationOptions.Never;

        //        System.Net.NetworkCredential mailAuthentication = new System.Net.NetworkCredential(senderEmailAddress, senderPwd);
        //        client.Credentials = mailAuthentication;
        //        client.EnableSsl = true;
        //        client.Send(mail);

        //        return true;
        //    }
        //    catch (System.Net.Mail.SmtpFailedRecipientsException e)
        //    {
        //        e.LogException();
        //        System.Diagnostics.Debug.WriteLine(e.FailedRecipient);
        //        //System.Diagnostics.EventLog.WriteEntry("Email", e.FailedRecipient);
        //    }
        //    catch (System.Net.Mail.SmtpFailedRecipientException e)
        //    {
        //        //System.Diagnostics.EventLog.WriteEntry("Email", e.FailedRecipient);
        //        System.Diagnostics.Debug.WriteLine(e.FailedRecipient);
        //        e.LogException();
        //    }
        //    catch (System.Net.Mail.SmtpException e)
        //    {
        //        e.LogException();
        //        System.Diagnostics.Debug.WriteLine(e.Message);
        //        //System.Diagnostics.EventLog.WriteEntry("Email", e.Message);
        //    }
        //    catch (System.Exception e)
        //    {
        //        e.LogException();
        //        System.Diagnostics.Debug.WriteLine(e.Message);
        //        //System.Diagnostics.EventLog.WriteEntry("Email", e.Message);
        //    }
        //    return false;
        //}

        public async Task SendAsync(IdentityMessage message)
        {
            await configSendGridasync(message);
        }

        // Use NuGet to install SendGrid (Basic C# client lib) 
        private async Task configSendGridasync(IdentityMessage message)
        {
            try
            {
                var myMessage = new SendGridMessage();
                myMessage.AddTo(message.Destination);
                myMessage.From = new System.Net.Mail.MailAddress(
                                    "support@cherrycitysoftware.com", "Dr Helman's office");
                myMessage.Subject = message.Subject;
                myMessage.Text = message.Body;
                myMessage.Html = string.Format("<p>{0}</p>", message.Body);

                var credentials = new NetworkCredential(
                           ConfigurationManager.AppSettings["mailAccount"],
                           ConfigurationManager.AppSettings["mailPassword"]
                           );

                // Create a Web transport for sending email.
                var transportWeb = new Web(credentials);

                // Send the email.
                if (transportWeb != null)
                {
                    await transportWeb.DeliverAsync(myMessage);
                }
                else
                {
                    Trace.TraceError("Failed to create Web transport.");
                    await Task.FromResult(0);
                }
            }
            catch (Exception e)
            {
                e.LogException();
                throw;
            }
        }

    }

    public class SmsService : IIdentityMessageService
    {
        public Task SendAsync(IdentityMessage message)
        {
            // Plug in your sms service here to send a text message.
            return Task.FromResult(0);
        }
    }
    public class ApplicationSignInManager : SignInManager<ApplicationUser, string>
    {
        public ApplicationSignInManager(ApplicationUserManager userManager, IAuthenticationManager authenticationManager)
            : base(userManager, authenticationManager)
        {
        }

        public override Task<ClaimsIdentity> CreateUserIdentityAsync(ApplicationUser user)
        {
            return user.GenerateUserIdentityAsync((ApplicationUserManager)UserManager);
        }

        public static ApplicationSignInManager Create(IdentityFactoryOptions<ApplicationSignInManager> options, IOwinContext context)
        {
            return new ApplicationSignInManager(context.GetUserManager<ApplicationUserManager>(), context.Authentication);
        }
    }
}
